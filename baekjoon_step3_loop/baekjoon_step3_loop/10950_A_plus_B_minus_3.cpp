#include <iostream>
using namespace std;

int main()
{
	int size;
	cin >> size;

	//row = 행= 가로줄
	//col = 열 = 세로줄

	int** p = new int* [size]; 
	//이중포인터로 2차원 배열을 동적 할당할 때 사용
	//p가 포인터를 가리키는 포인터임을 뜻함.
	//포인터의 배열을 할당한 다음 포인터의 배열을 반복해서 각 요소에 동적 배열을 할당해야 함.
	//size개의 포인터 원소들을 가진 1차원 배열
	//결과적을 p는 2차원 배열의 행들을 가리키는 배열임

	//2차원 배열 p의 원소는 각각의 1차원 배열의 시작 주소
	//2개의 원소를 가진 1차원 배열 size개 만큼 동적 할당
	//{{2개}, {2개}, {2개}} -> 이런 느낌인듯?
	for (int i = 0;i < size;i++) //반복문을 사용하여 배열의 각 행을 순회함
	{
		p[i] = new int[2];
		//각 p[i]번째에 대해 크기가 2인 정수형 배열을 동적으로 할당함. 
		//이렇게 하면 2개의 열로 구성된 2차원 배열이 된다.
		//p[i]는 이제 2개의 정수 값을 저장할 수 있는 메모리 블록을 가리키게 된다.
	}

	for (int i = 0;i < size;i++)
	{
		for (int j = 0;j < 2;j++)
		{
			int a;
			cin >> a;
			p[i][j] = a;
		}
	}

	for (int i = 0;i < size;i++)
	{
		cout << p[i][0] + p[i][1] << endl;
	}

	for (int i = 0;i < size ;i++) //배열의 각 행 순회
	{
		delete[] p[i]; 
		//각 행에 할당된 동적 메모리를 해제함. p[i]가 가리키는 메모리 블록을 해제함
		//p[i]의 2개 원소 배열 (col가 2인 배열들)을 해제하는 것 같음
	}
	delete[] p;
	//p자체에 할당된 동적 메모리를 해제함
	//size개 만큼 이었던 p를 해제하는 것 같음

	//이로써 2차원 배열 전체가 메모리에서 해제된다.
}